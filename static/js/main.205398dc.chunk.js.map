{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","result","Search","totalResults","console","log","props","onResults","onSubmit","this","type","placeholder","onChange","Component","Movie","title","year","poster","src","alt","MoviesList","movies","map","movie","key","imdbID","Year","Poster","App","useSearch","results","_handleResults","length","_renderResult","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8OAEaA,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjB,wBAAIC,UAAU,SAASD,ICAdE,EAAb,4MACIC,MAAQ,CACJC,WAAY,IAFpB,EAKIC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEH,WAAYE,EAAEE,OAAOC,SAN7C,EASIC,cAAgB,SAACJ,GACbA,EAAEK,iBADiB,IAEVP,EAAe,EAAKD,MAApBC,WAETQ,MAAM,mCAAD,OAdG,WAcH,cAAiDR,IACrDS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAW,IAAD,EACgCA,EAApCC,cADI,MACK,GADL,IACgCD,EAAvBE,oBADT,MACwB,IADxB,EAEZC,QAAQC,IAAI,CAAEH,SAAQC,iBACtB,EAAKG,MAAMC,UAAUL,OAlBjC,uDA2BQ,OACI,0BAAMM,SAAUC,KAAKd,eACrB,yBAAKT,UAAU,oBACX,yBAAKA,UAAU,WACX,2BACAA,UAAU,QACVwB,KAAK,OACLC,YAAY,gBACZC,SAAUH,KAAKnB,iBAEnB,yBAAKJ,UAAU,WACX,4BAAQA,UAAU,kBAAlB,iBAtCpB,GAAgC2B,aCAnBC,EAAb,uKAOe,IAAD,EAC0BL,KAAKH,MAA7BS,EADF,EACEA,MAAOC,EADT,EACSA,KAAMC,EADf,EACeA,OAErB,OACI,yBAAK/B,UAAU,QACX,yBAAKA,UAAU,cACX,4BAAQA,UAAU,SAClB,yBACAgC,IAAKD,EACLE,IAAKJ,MAIT,yBAAK7B,UAAU,gBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,cAAc6B,GAC3B,uBAAG7B,UAAU,iBAAiB8B,WAxB1D,GAA2BH,aCCdO,EAAb,uKAKe,IACCC,EAAWZ,KAAKH,MAAhBe,OACR,OACI,yBAAKnC,UAAU,cAEPmC,EAAOC,KAAI,SAAAC,GACP,OACI,yBAAKC,IAAKD,EAAME,OAAQvC,UAAU,mBAC9B,kBAAC,EAAD,CACI6B,MAAOQ,EAAMvC,MACbgC,KAAMO,EAAMG,KACZT,OAAQM,EAAMI,kBAhBlD,GAAgCd,aC2CjBe,G,wNAtCbxC,MAAQ,CAAEyC,WAAW,EAAOC,QAAS,I,EAErCC,eAAiB,SAACD,GAChB,EAAKtC,SAAS,CAAEqC,WAAW,EAAMC,a,8DAIjC,OACkC,IAA9BrB,KAAKrB,MAAM0C,QAAQE,OACjB,2DACA,kBAAC,EAAD,CAAYX,OAAQZ,KAAKrB,MAAM0C,Y,+BAKrC,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,sBACA,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAYqB,UAAWE,KAAKsB,kBAG5BtB,KAAKrB,MAAMyC,UACTpB,KAAKwB,gBACL,kE,GAzBMpB,cCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.205398dc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Title = ({ children }) => (\r\n    <h1 className=\"title\">{children}</h1>\r\n)","import React, { Component } from 'react'\r\n\r\nconst API_KEY = '966ef11f'\r\nexport class SearchForm extends Component {\r\n    state = {\r\n        inputMovie: ''\r\n    }\r\n\r\n    _handleChange = (e) => {\r\n        this.setState({ inputMovie: e.target.value })\r\n    }\r\n\r\n    _handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const  { inputMovie } = this.state\r\n\r\n        fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            const { Search = [], totalResults = \"0\" } = result\r\n            console.log({ Search, totalResults })\r\n            this.props.onResults(Search)\r\n        })\r\n    }\r\n\r\n    \r\n    // http://www.omdbapi.com/?i=tt3896198&apikey=966ef11f\r\n\r\n\r\n    render () {\r\n        return (\r\n            <form onSubmit={this._handleSubmit}>\r\n            <div className=\"field has-addons\">\r\n                <div className=\"control\">\r\n                    <input \r\n                    className=\"input\" \r\n                    type=\"text\" \r\n                    placeholder=\"Movie to find\" \r\n                    onChange={this._handleChange}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <button className=\"button is-info\">\r\n                    Search\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Movie extends Component {\r\n    static propTypes = {\r\n        title: PropTypes.string,\r\n        year: PropTypes.string,\r\n        poster: PropTypes.string\r\n    }\r\n\r\n    render () {\r\n        const { title, year, poster } = this.props\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                    <figure className=\"image\">\r\n                    <img \r\n                    src={poster} \r\n                    alt={title}\r\n                    />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n                        <div className=\"media-content\">\r\n                            <p className=\"title is-4\">{title}</p>\r\n                            <p className=\"subtitle is-6\">{year}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport  { Movie } from './Movie'\r\n\r\nexport class MoviesList extends Component {\r\n    static propTypes = {\r\n        movies: PropTypes.array\r\n    }\r\n\r\n    render () {\r\n        const { movies } = this.props\r\n        return (\r\n            <div className=\"MoviesList\">\r\n                {\r\n                    movies.map(movie => {\r\n                        return (\r\n                            <div key={movie.imdbID} className=\"MoviesList-item\">\r\n                                <Movie\r\n                                    title={movie.Title}\r\n                                    year={movie.Year}\r\n                                    poster={movie.Poster}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                \r\n            </div>\r\n        )\r\n        \r\n    }\r\n}","import React, { Component } from 'react';\nimport { Title } from './components/Title'\nimport { SearchForm } from './components/SearchForm'\nimport { MoviesList } from './components/MoviesList'\nimport './App.css';\nimport 'bulma/css/bulma.css'\n\n\nclass App extends Component {\n  state = { useSearch: false, results: [] }\n\n  _handleResults = (results) => {\n    this.setState({ useSearch: true, results })\n  }\n\n  _renderResult () {\n    return (\n        this.state.results.length === 0 \n        ? <p>Sorry! :( results not found!</p>\n        : <MoviesList movies={this.state.results} />\n    )\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Title>Search Movies</Title>\n        <div className=\"SearchForm-wrapper\">\n          <SearchForm onResults={this._handleResults}/>\n        </div>\n        {\n          this.state.useSearch \n          ? this._renderResult()\n          : <small>Debes usar el buscador ptm</small>\n        }\n      </div>\n    )\n  }\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n      \n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}